    graph TD

        %% PROJECT PARTS [PP]
        subgraph ProjectParts["Project Parts"]

            %% PP NODES
            FullStackPresentation["`**Full Stack Presentation**`"]

            subgraph Backend["`**Backend**`"]

                direction TB
            
                Airflow["`**Airflow**
                _(container)_`"]


                %% DATA INGESTION [DI]
                subgraph Data Ingestion
                    
                    %% DI NODES
                    
                    DataDAG["`**Data Preparation DAG**`"]
                    
                    PostgreSQL[("`**PostgreSQL**
                    Database _(container)_`")]
                    
                    MinIO[("`**MinIO**
                    Object Storage _(container)_`")]


                    %% DI EDGES

                    DataDAG -. "`_batch upload of 2k products every 15min_`" .-> DataDAG
                    DataDAG --> PostgreSQL
                    DataDAG -.-> MinIO
                end


                %% MACHINE LEARNING [ML]
                subgraph Machine Learning

                    %% MT NODES

                    MLDAG["`**ML Pipeline DAG**`"]
                    
                    MLContainer["`**Model Training**
                    _(container)_`"]
                    
                    Training["`**GridSearchCV**
                    Model Training`"]
                    
                    Evaluation["`Model Evaluation`"]
                    
                    MLflow[("`**MLflow**
                    Model Registry _(container)_`")]
                    

                    %% MT NODES

                    MLDAG --> MLContainer
                    MLContainer --> Training
                    Training --> Evaluation
                    Evaluation --> MLflow
                    MLflow -- "`_current best model_`" --> MLContainer
                end


                %% MONITORING & TRIGGERING [MaT]
                subgraph Monitoring and Triggering

                    %% MaT NODES

                    Prometheus["`**Prometheus**
                    _(container)_`"]

                    Accuracy["`Accuracy Monitoring`"]

                    DataBacklog["`Data Backlog`"]

                    DriftDetection["`Drift Detection Evidently`"]

                    SmartTrigger["`**Smart Trigger Mechanism**
                    1. F1 < 0.7
                    2. Backlog >= 10k`"]

                    RetrainTrigger{"`Retraining Trigger`"}
                    
                                        
                    %% MaT EDGES

                    Prometheus --> Accuracy
                    Prometheus --> DataBacklog
                    Accuracy --> SmartTrigger
                    DataBacklog --> SmartTrigger
                    DriftDetection --> SmartTrigger
                    SmartTrigger --> RetrainTrigger
                end


                %% REAL-TIME SERVING [RTS]
                subgraph Real-Time Serving

                    %% RTS NODES

                    FastAPI["`**FastAPI**
                    _(container)_`"]

                    RealTimeRequests["`Real Time Requests`"]
                    
                    RealTimePredictions["`Real Time Predictions`"]
                    

                    %% RTS NODES

                    RealTimeRequests --> FastAPI
                    FastAPI --> RealTimePredictions
                end

                %% BACKEND EDGES
                Airflow --> DataDAG & MLDAG
                PostgreSQL --> DriftDetection & DataBacklog & Accuracy
                MLContainer --> Prometheus & FastAPI
                FastAPI --> Prometheus
                MLflow --> PostgreSQL
                RetrainTrigger -. "`_only if necessary_`" .-> MLDAG
            end

            subgraph Frontend["`**Frontend**`"]

                subgraph User Interface and User Input
            
                    Grafana["`**Grafana**
                        _(container)_`"]

                    Streamlit["`**Streamlit**
                    Web Interface _(container)_`"]
                    
                    CommandLine["`**Command Line**`"]

                    UserInput["`**User Input**
                    1. Product title
                    2. Product description`"]

                    UserInput --> Streamlit & CommandLine 
                end
            end

            FullStackPresentation --> Backend & Frontend               
        end
    
    %% LAYOUT: Connect subgraphs 
    Streamlit & CommandLine --> FastAPI
    Prometheus --> Grafana
    

    %% STYLING
    %% Apply default styles to ALL nodes
    classDef default fill:#FFF,stroke:#333,stroke-width:2px;

    %% Apply default styles to ALL edges
    linkStyle default stroke:#999,stroke-width:2px,color:black;

    class Backend,Frontend nestedGraphs
    class ProjectParts,UI invisibleSubgraph
    class MLContainer,FastAPI,Airflow,Prometheus,Grafana,Streamlit container
    class PostgreSQL,MinIO,MLflow storage
    class DataDAG,MLDAG service
    class RetrainTrigger decision
    class Accuracy,DataBacklog,DriftDetection monitoring

    classDef nestedGraphs fill:transparent,stroke:#000,stroke-width:2px,color:#fff,stroke-dasharray: 5 10
    classDef invisibleSubgraph fill:transparent,stroke:none,stroke-width:0px
    classDef container fill:#E0F2FE,stroke:#0369A1,stroke-width:2px
    classDef storage fill:#FEE2E2,stroke:#DC2626,stroke-width:2px
    classDef service fill:#ECFDF5,stroke:#059669,stroke-width:2px
    classDef decision fill:#FFF3E0
    classDef monitoring fill:#FEF3C7,stroke:#D97706,stroke-width:2px
    